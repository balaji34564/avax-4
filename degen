// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "hardhat/console.sol";

contract ItemRedeemToken is ERC20, Ownable, ERC20Burnable {
    event LogMessage(string message);

    struct Snack {
        string snackName;
        uint256 tokenCost;
    }

    mapping(string => Snack) public snacks;
    mapping(address => string) public redeemed;

    constructor() ERC20("DEGEN", "DGN") Ownable(msg.sender) {
        snacks["Pizza"] = Snack("Pizza", 10);
        snacks["Burger"] = Snack("Burger", 8);
        snacks["Sandwich"] = Snack("Sandwich", 5);
        snacks["Milkshake"] = Snack("Milkshake", 3);
    }

    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function burn(uint256 amount) public override {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT FUNDS!!");
        _burn(msg.sender, amount);
        emit LogMessage("Burned tokens");
    }

    function transferTokens(address recipient, uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT FUNDS!!");
        _transfer(msg.sender, recipient, amount);
    }

    function redeemSnack(string memory snackName) external payable {
        Snack storage snack = snacks[snackName];
        require(bytes(snack.snackName).length > 0, "Snack does not exist");
        require(balanceOf(msg.sender) >= snack.tokenCost, "INSUFFICIENT FUNDS!!");
        
        _burn(msg.sender, snack.tokenCost);
        redeemed[msg.sender] = snackName; // Update with the latest redeemed snack name
        emit LogMessage("Redeemed snack");
    }

   
    function modifySnackTokenCost(string memory snackName, uint256 newTokenCost) external onlyOwner {
        require(snacks[snackName].tokenCost != 0, "Snack does not exist");
        snacks[snackName].tokenCost = newTokenCost;
    }

    
    function distributeSnacks(address[] calldata recipients, string[] calldata snackNames) external onlyOwner {
        require(recipients.length == snackNames.length, "Invalid input lengths");

        for (uint256 i = 0; i < recipients.length; i++) {
            Snack storage snack = snacks[snackNames[i]];
            require(bytes(snack.snackName).length > 0, "Snack does not exist");
            
            _transfer(msg.sender, recipients[i], snack.tokenCost);
        }
    }
}
